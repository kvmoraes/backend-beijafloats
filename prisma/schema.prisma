generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  name           String
  image          String        @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  wallet_address String        @unique
  wallet_id      String        @unique
  recipes        recipe[]
  recipe_sales   recipe_sale[]
  beer_sale      beer_sale[]
}

model recipe {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  ingredients  String
  price        Float
  image        String        @default("https://torontobrewing.ca/cdn/shop/files/hefe_300x300.png")
  royaltiesId  String        @default("")
  creatorId    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  creator      User          @relation(fields: [creatorId], references: [id])
  recipe_sales recipe_sale[]

  @@index([creatorId], map: "recipe_creatorId_fkey")
}

model recipe_sale {
  id          Int       @id @default(autoincrement())
  price       Float
  nft_address String    @unique
  recipeId    Int
  buyerId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  buyer       User      @relation(fields: [buyerId], references: [id])
  recipe      recipe    @relation(fields: [recipeId], references: [id])
  beer        beer[]

  @@index([buyerId], map: "recipe_sale_buyerId_fkey")
  @@index([recipeId], map: "recipe_sale_recipeId_fkey")
}

model beer {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  recipeSaleId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  recipe_sale  recipe_sale @relation(fields: [recipeSaleId], references: [id])
  beer_sale    beer_sale[]

  @@index([recipeSaleId], map: "beer_recipeSaleId_fkey")
}

model beer_sale {
  id            Int       @id @default(autoincrement())
  price         Float
  token_address String    @unique
  beerId        Int
  buyerId       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  buyer         User      @relation(fields: [buyerId], references: [id])
  beer          beer      @relation(fields: [beerId], references: [id])

  @@index([buyerId], map: "recipe_sale_buyerId_fkey")
  @@index([beerId], map: "beer_sale_beerId_fkey")
}
